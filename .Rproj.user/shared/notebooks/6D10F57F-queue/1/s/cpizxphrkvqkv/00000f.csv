"0","import simpy"
"0","import random"
"0","import pandas as pd"
"0",""
"0","# Parameters"
"0","lambda_1 = 70 / 60.0  # Arrival rate for in-store customers (per minute)"
"0","lambda_2 = 90 / 60.0  # Arrival rate for drive-thru customers (per minute)"
"0","mu_1 = 1              # Time to take an order (minutes)"
"0","mu_2 = 3              # Average time to make an order (minutes), with a minimum of 2 minutes"
"0","simulation_time = 480 # Total simulation time (minutes)"
"0","order_types = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'  # Order types"
"0",""
"0","env = simpy.Environment()"
"0",""
"0","# Resources"
"0","resources = {"
"0","    'in_store': simpy.Resource(env, 1),"
"0","    'drive_thru': simpy.Resource(env, 1),"
"0","    'maker': simpy.Resource(env, 1)  # Dedicated maker can be assisted by others"
"0","}"
"0",""
"0","# Queues"
"0","queues = {"
"0","    'in_store': simpy.Store(env),"
"0","    'drive_thru': simpy.Store(env),"
"0","    'making': simpy.Store(env)"
"0","}"
"0",""
"0","# Tracking for dynamic task switching"
"0","task_status = {"
"0","    'in_store': {'busy': False, 'role': 'ordering'},"
"0","    'drive_thru': {'busy': False, 'role': 'ordering'},"
"0","    'maker': {'busy': False, 'role': 'making'}"
"0","}"
"0",""
"0","# Data collection"
"0","data = []"
"0",""
"0","def customer(env, customer_type):"
"0","    order_type = random.choice(order_types)"
"0","    order = {"
"0","        'customer_type': customer_type,"
"0","        'order_type': order_type,"
"0","        'times': {}"
"0","    }"
"0","    "
"0","    # Order taking process"
"0","    with resources[customer_type].request() as req:"
"0","        yield req"
"0","        task_status[customer_type]['busy'] = True"
"0","        order['times']['order_start'] = env.now"
"0","        # Ensure the order taking time is at least 1 minute"
"0","        order_taking_time = max(random.expovariate(1 / mu_1), 1)"
"0","        yield env.timeout(order_taking_time)"
"0","        order['times']['order_end'] = env.now"
"0","        task_status[customer_type]['busy'] = False"
"0","    "
"0","    # Add order to making queue"
"0","    queues['making'].put(order)"
"0","    "
"0","    # Dynamic task switching check"
"0","    check_switch_roles(env)"
"0","    "
"0","    "
"0","def make_order(env):"
"0","    while True:"
"0","        order = yield queues['making'].get()"
"0","        with resources['maker'].request() as req:"
"0","            yield req"
"0","            # Batch processing check"
"0","            batch_time = max(random.expovariate(1 / mu_2), 2)"
"0","            order['times']['make_start'] = env.now"
"0","            yield env.timeout(batch_time)  # Simulate making time, considering batches"
"0","            order['times']['make_end'] = env.now"
"0","            data.append(order)"
"0","            "
"0","def check_switch_roles(env):"
"0","    """"""Check if an order-taking worker can switch to help making orders."""""""
"0","    for role in ['in_store', 'drive_thru']:"
"0","        if not queues[role].items and not task_status[role]['busy']:"
"0","            # If the queue is empty and the worker is not busy, they can help making orders"
"0","            if not task_status['maker']['busy']:"
"0","                env.process(make_order(env))"
"0","                "
"0","def generate_customers(env):"
"0","    """"""Customer generation process for both in-store and drive-thru."""""""
"0","    while True:"
"0","        yield env.timeout(random.expovariate(lambda_1))"
"0","        queues['in_store'].put(env.process(customer(env, 'in_store')))"
"0","        yield env.timeout(random.expovariate(lambda_2))"
"0","        queues['drive_thru'].put(env.process(customer(env, 'drive_thru')))"
"0","        "
"0","# Start the simulation"
"0","env.process(generate_customers(env))"
"0","env.process(make_order(env))  # Start a single process for order making"
"0","env.run(until=simulation_time)"
"1","<Process(generate_customers) object at 0x29c00c6e0>
<Process(make_order) object at 0x29c2b76b0>
"
"0","# Convert data to DataFrame for analysis"
"0","results_df = pd.DataFrame([{"
"0","    'customer_type': d['customer_type'],"
"0","    'order_type': d['order_type'],"
"0","    **d['times']"
"0","} for d in data])"
"0",""
"0","results_df.head(100)"
"1","   customer_type order_type  order_start  order_end  make_start    make_end
0       in_store          E     0.298105   1.298105    1.298105    4.120917
1     drive_thru          V     1.608323   2.928643    4.120917    6.120917
2       in_store          P     1.697277   3.521873    6.120917   11.870804
3     drive_thru          U     2.928643   3.928643   11.870804   20.994816
4       in_store          C     3.796247   4.796247   20.994816   26.081661
..           ...        ...          ...        ...         ...         ...
95      in_store          K    70.838278  72.557464  336.470833  345.326605
96      in_store          N    72.557464  73.557464  345.326605  347.326605
97    drive_thru          E    70.780116  74.132746  347.326605  349.326605
98      in_store          D    73.679982  74.679982  349.326605  351.326605
99    drive_thru          Y    75.090805  76.090805  351.326605  361.540652

[100 rows x 6 columns]
"
